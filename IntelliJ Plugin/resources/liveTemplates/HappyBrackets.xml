<templateSet group="HappyBrackets">
  <template name="debugMain" value="/**&#10;     * This function is used when running sketch in IntelliJ IDE for debugging or testing&#10;     * @param args standard args required&#10;     */&#10;    public static void main(java.lang.String[] args) {&#10;&#10;        try {&#10;            net.happybrackets.device.HB.runDebug(java.lang.invoke.MethodHandles.lookup().lookupClass());&#10;        } catch (java.lang.Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }" description="Creates the main function for debugging within the IDE" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="accelerometerSensor" value="/*****************************************************&#10;         * Find an accelerometer sensor. If no sensor is found&#10;         * you will receive a status message&#10;         * accelerometer values typically range from -1 to + 1 &#10;         * to create this code, simply type accelerometerSensor&#10;         *****************************************************/&#10;        try {&#10;            hb.findSensor(net.happybrackets.device.sensors.Accelerometer.class).addValueChangedListener(sensor -&gt; {&#10;                net.happybrackets.device.sensors.Accelerometer accelerometer = (net.happybrackets.device.sensors.Accelerometer) sensor;&#10;                float x_val = accelerometer.getAccelerometerX();&#10;                float y_val = accelerometer.getAccelerometerY();&#10;                float z_val = accelerometer.getAccelerometerZ();&#10;&#10;                /******** Write your code below this line ********/&#10;                $END$&#10;&#10;                /******** Write your code above this line ********/&#10;&#10;            });&#10;&#10;        } catch (net.happybrackets.device.sensors.SensorNotFoundException e) {&#10;            hb.setStatus(&quot;Unable to create Accelerometer&quot;);&#10;        }&#10;        /*** End accelerometerSensor code ***/" description="Inserts an acceleormeter sensor" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="samplePlayer-basic" value="/**************************************************************&#10;         * Load a sample and play it&#10;         * &#10;         * simply type samplePLayer-basic to generate this code and press &lt;ENTER&gt; for each parameter&#10;         **************************************************************/&#10;        final int NUMBER_AUDIO_CHANNELS = $NUM_CHANNELS$; // define how many audio channels our device is using&#10;        final float VOLUME = $VOLUME$; // define how loud we want the sound&#10;&#10;        // Define our sample name&#10;        final java.lang.String SAMPLE_NAME = &quot;$SAMPLE_NAME$&quot;;&#10;&#10;        // create our actual sample&#10;        net.beadsproject.beads.data.Sample sample = net.beadsproject.beads.data.SampleManager.sample(SAMPLE_NAME);&#10;&#10;        // test if we opened the sample successfully&#10;        if (sample != null) {&#10;            // Create our sample player&#10;            net.beadsproject.beads.ugens.SamplePlayer samplePlayer = new net.beadsproject.beads.ugens.SamplePlayer(hb.ac, sample);&#10;            // Samples are killed by default at end. We will stop this default actions so our sample will stay alive&#10;            samplePlayer.setKillOnEnd(false);&#10;            &#10;            // Connect our sample player to audio&#10;            net.beadsproject.beads.ugens.Gain gainAmplifier = new net.beadsproject.beads.ugens.Gain(hb.ac, NUMBER_AUDIO_CHANNELS, VOLUME);&#10;            gainAmplifier.addInput(samplePlayer);&#10;            hb.ac.out.addInput(gainAmplifier);&#10;&#10;            /******** Write your code below this line ********/&#10;&#10;            $END$&#10;            /******** Write your code above this line ********/&#10;        }&#10;        else&#10;        {&#10;            hb.setStatus(&quot;Failed sample &quot; + SAMPLE_NAME);&#10;        }&#10;        /*** End samplePlayer code ***/" description="creates a Simple SamplePlayer" toReformat="true" toShortenFQNames="true">
    <variable name="NUM_CHANNELS" expression="variableOfType(Integer)" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <variable name="VOLUME" expression="variableOfType(Type)" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <variable name="SAMPLE_NAME" expression="variableOfType(Type)" defaultValue="&quot;data/audio/Roje/i-write.wav&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gyroscopeSensor" value="/*****************************************************&#10;         * Find an gyroscope sensor. If no sensor is found&#10;         * you will receive a status message&#10;         *&#10;         * to create this code, simply type gyroscopeSensor&#10;         *****************************************************/&#10;        try {&#10;            hb.findSensor(net.happybrackets.device.sensors.Gyroscope.class).addValueChangedListener(sensor -&gt; {&#10;                net.happybrackets.device.sensors.Gyroscope gyroscope = (net.happybrackets.device.sensors.Gyroscope) sensor;&#10;                float pitch = gyroscope.getPitch();&#10;                float roll = gyroscope.getRoll();&#10;                float yaw = gyroscope.getYaw();&#10;&#10;                /******** Write your code below this line ********/&#10;   &#10;&#10;                /******** Write your code above this line ********/&#10;&#10;            });&#10;&#10;        } catch (net.happybrackets.device.sensors.SensorNotFoundException e) {&#10;            hb.setStatus(&quot;Unable to find gyroscope&quot;);&#10;        }&#10;        /*** End gyroscopeSensor code ***/" description="Inserts a gyroscope sensor" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="clockTimer" value="/************************************************************&#10;         * start clockTimer&#10;         * Create a clock with a interval based on the clock duration&#10;         *&#10;         * To create this, just type clockTimer&#10;         ************************************************************/&#10;        // create a clock and start changing frequency on each beat&#10;        final float CLOCK_INTERVAL = $INTERVAL$;&#10;&#10;        // Create a clock with beat interval of CLOCK_INTERVAL ms&#10;        net.beadsproject.beads.ugens.Clock clock = new net.beadsproject.beads.ugens.Clock(hb.ac, CLOCK_INTERVAL);&#10;        // connect the clock to HB&#10;        hb.ac.out.addDependent(clock);&#10;&#10;        // let us handle triggers&#10;        clock.addMessageListener(new net.beadsproject.beads.core.Bead() {&#10;            @java.lang.Override&#10;            protected void messageReceived(net.beadsproject.beads.core.Bead bead) {&#10;                // see if we are at the start of a beat&#10;                boolean start_of_beat = clock.getCount() % clock.getTicksPerBeat() == 0;&#10;                if (start_of_beat) {&#10;                    /*** Write your code to perform functions on the beat below this line ****/&#10;                    &#10;                    $END$&#10;&#10;                    /*** Write your code to perform functions on the beat above this line ****/&#10;                }&#10;                else&#10;                {&#10;                    /*** Write your code to perform functions off the beat below this line ****/&#10;&#10;                    /*** Write your code to perform functions off the beat above this line ****/&#10;                }&#10;            }&#10;        });&#10;        /*********************** end clockTimer **********************/" description="Creates a simple clock timer" toReformat="true" toShortenFQNames="true">
    <variable name="INTERVAL" expression="variableOfType(Float)" defaultValue="&quot;500&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="basicWavePlayer" value="final float FREQUENCY = 1000; // this is the frequency of the waveform we will make&#10;&#10;        final int NUMBER_AUDIO_CHANNELS = 1; // define how many audio channels our device is using&#10;        final float VOLUME = 0.1f; // define how loud we want the sound&#10;&#10;        // create a wave player to generate a waveform based on frequency and waveform type&#10;        net.beadsproject.beads.ugens.WavePlayer waveformGenerator = new net.beadsproject.beads.ugens.WavePlayer(hb.ac, FREQUENCY, net.beadsproject.beads.data.Buffer.SINE);&#10;&#10;        // set up a gain amplifier to control the volume&#10;        net.beadsproject.beads.ugens.Gain gainAmplifier = new net.beadsproject.beads.ugens.Gain(hb.ac, NUMBER_AUDIO_CHANNELS, VOLUME);&#10;&#10;        // connect our WavePlayer object into the Gain object&#10;        gainAmplifier.addInput(waveformGenerator);&#10;&#10;        // Now plug the gain object into the audio output&#10;        hb.ac.out.addInput(gainAmplifier);" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="beadMessage" value="new net.beadsproject.beads.core.Bead() {&#10;            @java.lang.Override&#10;            protected void messageReceived(net.beadsproject.beads.core.Bead bead) {&#10;                /*** Write your code below this line ***/&#10;                $END$&#10;                /*** Write your code above this line ***/&#10;                &#10;            }&#10;        }" description="Create a Bead message listener" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
</templateSet>