plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}
apply plugin: 'idea'

// Test for right version of Java in use for running this script
assert org.gradle.api.JavaVersion.current().isJava8Compatible()

idea{
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

repositories {
    //All sub-projects will now refer to the same 'libs' directory
    flatDir {
        dirs "libs"
    }
    mavenCentral()
}

dependencies {
    //Add any libs directory jars, for example beads
    compile   fileTree(dir: "$rootProject.projectDir/libs", include: '*.jar')

    // config dependencies
    compile     group: 'com.google.code.gson',  name: 'gson',               version: '2.6.2'
    compile     group: 'org.nanohttpd',         name: 'nanohttpd',          version: '2.2.0'
    compile     group: 'com.squareup.okhttp3',  name: 'okhttp',             version: '3.2.0'
    // osc
    compile     group: 'de.sciss',              name: 'netutil',            version: '1.0.0'
    // pi stuff
    //compile     group: 'com.pi4j',              name: 'pi4j-core',          version: '1.1'
    // logging
    compile     group: 'ch.qos.logback',        name: 'logback-core',       version: '1.1.7'
    compile     group: 'ch.qos.logback',        name: 'logback-classic',    version: '1.1.7'
    runtime     group: 'org.codehaus.groovy',   name: 'groovy',             version: '2.4.7'
    compile     group: 'org.slf4j',             name: 'slf4j-api',          version: '1.7.7'

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    testCompile group: 'junit',                 name: 'junit',              version: '4.+'
}

//don't add tutorial files to source set, they don't need to be in the final jar.
sourceSets {
    main {
        java {
            srcDirs( "src/main/java" )
        }
    }
}

task development

task fastbuild

task config {
    //select the appropriate resources includes
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(development)) {
            //Ensure we include a production version of logback.groovy config in our classpath
            sourceSets.main.resources.srcDirs = ["config/dev"]
        } else {
            //Ensure we include a production version of logback.groovy config in our classpath
            sourceSets.main.resources.srcDirs = ["config/prod"]
        }
    }
}

//create a jar of javadocs
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// A helper for checking which jars are loaded
task listJars << {
    configurations.compile.each { File file -> println file.name }
}

task smile << {
        println ':)'
        println docsDir
}

jar {
    manifest {
        attributes 'Main-Class': 'net.happybrackets.device.DeviceMain'
    }
}

shadowJar {
    baseName = 'HB'
    classifier = ''
    manifest {
        attributes 'Main-Class': 'net.happybrackets.device.DeviceMain'
    }
}

task deploy

task deployJarAndJavaDoc << {
    copy {
        from 'build/libs/HB.jar'
        into '../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/libs'
    }
    copy {
        from 'build/libs/HBVersion.txt'
        into '../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/libs'
    }
    copy {
        from 'build/docs/javadoc'
        into '../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/libs/docs/hb/javadoc'
    }
    copy {
        from 'build/libs/HBVersion.txt'
        into '../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/Device/HappyBrackets'
    }
    copy {
        from 'build/libs/HB.jar'
        into '../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/Device/HappyBrackets'
    }
    println "copied jars"
}


task deployPlugin << {
    copy {
        from '../IntelliJ Plugin/HappyBrackets_IntelliJ_Plugin.zip'
        into '../Distribution/HappyBrackets Developer Kit'
    }
}

task packJar (type:Zip) {
    destinationDir buildDir //set our output directory
    archiveName 'HB.zip'  //set the name of our archive

    //config
    from("build/libs/HB.jar") {
        include '*/**'
    }

    //config
    from("build/libs/HBVersion.txt") {
        include '*/**'
    }

    println "Creating device package: $buildDir/$archiveName"
}

task packDeviceRuntime (type:Zip) {
    destinationDir buildDir //set our output directory
    archiveName 'HappyBracketsDeviceRuntime.zip'  //set the name of our archive

    //config
    from("../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/Device") {
        include 'HappyBrackets/*/**'
    }

    println "Creating device package: $buildDir/$archiveName"
}

task packProject (type:Zip) {
    destinationDir buildDir //set our output directory
    archiveName 'HappyBracketsProject.zip'  //set the name of our archive
    excludes = ['**/*.class', '**/HB.jar', '**/ollie.xml']

    //config
    from("../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/") {
        include '*/**'
    }

    println "Creating project package: $buildDir/$archiveName"
}

task copyProject << {
    copy {
        from '../HappyBrackets/build/HappyBracketsProject.zip'
        into '../IntelliJ Plugin/resources/projectTemplates'
    }
}

task copyHBZip << {
    copy {
        from '../HappyBrackets/build/HB.zip'
        into '../IntelliJ Plugin/resources/projectTemplates'
    }
}

task packDevKit (type:Zip) {
    destinationDir buildDir //set our output directory
    archiveName 'HappyBracketsDeveloperKit.zip'  //set the name of our archive

    //config
    from("../Distribution") {
        include 'HappyBrackets Developer Kit/*/**'
    }

    println "Creating device package: $buildDir/$archiveName"
}

shadowJar.dependsOn config
copyHBZip.dependsOn packJar
copyProject.dependsOn packProject
copyProject.dependsOn copyHBZip

deployJarAndJavaDoc.dependsOn shadowJar

packDeviceRuntime.dependsOn shadowJar
packDeviceRuntime.dependsOn deployJarAndJavaDoc

//setup deploy dependencies
deploy.dependsOn build
deploy.dependsOn test
deploy.dependsOn shadowJar
deploy.dependsOn javadoc
deploy.dependsOn deployPlugin
deploy.dependsOn packDeviceRuntime
deploy.dependsOn packProject
deploy.dependsOn copyProject

// Faster build without tests
fastbuild.dependsOn build
fastbuild.dependsOn shadowJar
fastbuild.dependsOn deployPlugin
fastbuild.dependsOn packDeviceRuntime


packDevKit.dependsOn packDeviceRuntime

//development build routine
development.dependsOn deploy
